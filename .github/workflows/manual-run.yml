name: Manual Service Run

# Run services for a specified duration
# - Manual: workflow_dispatch with custom duration
# - Automatic: on push and daily schedule (5 minutes)
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to keep services running (minutes)'
        required: true
        default: '30'
        type: choice
        options:
          - '5'
          - '10'
          - '15'
          - '30'
          - '45'
          - '60'
          - '90'
          - '120'
      enable-debug:
        description: 'Enable tmate SSH debugging session'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main

  schedule:
    # Run once daily at 00:00 UTC
    - cron: '0 0 * * *'

jobs:
  run-services:
    name: Run Rediacc Elite Services
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Rediacc Elite Services
        id: services
        uses: ./action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        with:
          keep-alive: true  # Don't auto-cleanup, we'll handle it manually

      - name: Display Service Information
        run: |
          # Set duration: use input if available (manual run), otherwise 5 minutes (auto run)
          DURATION="${{ github.event.inputs.duration }}"
          if [ -z "$DURATION" ]; then
            DURATION="5"
            TRIGGER_TYPE="Automatic (Push/Schedule)"
          else
            TRIGGER_TYPE="Manual"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Rediacc Elite Services are now running!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "⏱️  SELECTED DURATION: ${DURATION} minutes ($TRIGGER_TYPE)"
          echo ""
          echo "📍 Local Service URLs:"
          echo "   • API URL: ${{ steps.services.outputs.api-url }}"
          echo "   • Web UI: http://localhost"
          echo ""
          echo "🗄️  Database Connection:"
          echo "   • SQL Server: ${{ steps.services.outputs.sql-connection }}"
          echo ""
          echo "⏳ Setting up public access via Cloudflare Tunnel..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Save duration for later steps
          echo "$DURATION" > /tmp/duration.txt

      - name: Create Cloudflare Tunnel
        id: tunnel
        uses: rediacc/action-cloudflare-tunnel@v1
        with:
          url: http://localhost
          timeout: 30

      - name: Create Debug Session
        if: github.event.inputs.enable-debug == 'true'
        id: tmate
        uses: rediacc/action-tmate@v1
        with:
          timeout: 60

      - name: Display Access Information
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 PUBLIC ACCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "   Cloudflare Tunnel: ${{ steps.tunnel.outputs.tunnel-url }}"
          echo ""

          # Display debug access if enabled
          if [ "${{ github.event.inputs.enable-debug }}" == "true" ]; then
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔧 DEBUG ACCESS (Interactive Terminal)"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "   SSH Terminal:  ${{ steps.tmate.outputs.ssh-connection }}"
            echo "   Web Terminal:  ${{ steps.tmate.outputs.web-url }}"
            echo ""
            echo "   Read-Only SSH: ${{ steps.tmate.outputs.ssh-ro-connection }}"
            echo "   Read-Only Web: ${{ steps.tmate.outputs.web-ro-url }}"
            echo ""
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Initial Service Status
        run: |
          echo ""
          echo "📊 Initial Service Status:"
          ./go status
          echo ""
          echo "✅ Health Check:"
          ./go health

      - name: Keep Services Alive
        run: |
          # Read duration from saved file
          DURATION_MIN=$(cat /tmp/duration.txt)
          DURATION_SEC=$((DURATION_MIN * 60))
          END_TIME=$(($(date +%s) + DURATION_SEC))
          CHECK_INTERVAL=300  # Check every 5 minutes

          # Get tunnel URL from action output
          TUNNEL_URL="${{ steps.tunnel.outputs.tunnel-url }}"

          echo ""
          echo "⏳ Keeping services alive for ${DURATION_MIN} minutes..."
          echo "   Start time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "   End time:   $(date -d @${END_TIME} '+%Y-%m-%d %H:%M:%S')"
          echo ""

          while [ $(date +%s) -lt ${END_TIME} ]; do
            REMAINING=$(( (END_TIME - $(date +%s)) / 60 ))

            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "⏱️  Time remaining: ${REMAINING} minutes ($(date '+%H:%M:%S'))"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

            # Run health check
            if ./go health; then
              echo "✅ All services healthy"
            else
              echo "⚠️  Some services may be unhealthy"
              echo ""
              echo "📋 Container Status:"
              ./go status
            fi

            # Display access information
            if [ -n "$TUNNEL_URL" ]; then
              echo ""
              echo "🌍 Public URL: $TUNNEL_URL"
            fi

            # Display debug access if enabled
            if [ "${{ github.event.inputs.enable-debug }}" == "true" ]; then
              echo "🔧 Debug SSH: ${{ steps.tmate.outputs.ssh-connection }}"
              echo "🔧 Debug Web: ${{ steps.tmate.outputs.web-url }}"
            fi

            # Calculate next check or remaining time
            TIME_LEFT=$((END_TIME - $(date +%s)))
            if [ ${TIME_LEFT} -lt ${CHECK_INTERVAL} ]; then
              SLEEP_TIME=${TIME_LEFT}
            else
              SLEEP_TIME=${CHECK_INTERVAL}
            fi

            if [ ${SLEEP_TIME} -gt 0 ]; then
              echo ""
              echo "💤 Sleeping for $((SLEEP_TIME / 60)) minutes..."
              sleep ${SLEEP_TIME}
            fi
          done

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⏰ Duration completed at $(date '+%Y-%m-%d %H:%M:%S')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Final Service Status
        if: always()
        run: |
          echo ""
          echo "📊 Final Service Status:"
          ./go status || true
          echo ""
          echo "📋 Recent Logs (last 50 lines):"
          ./go logs --tail=50 || true

      - name: Cleanup Services
        if: always()
        run: |
          echo ""
          echo "🧹 Cleaning up services..."

          # Stop tmate session if enabled
          if [ "${{ github.event.inputs.enable-debug }}" == "true" ]; then
            TMATE_PID="${{ steps.tmate.outputs.session-pid }}"
            if [ -n "$TMATE_PID" ]; then
              if ps -p $TMATE_PID > /dev/null 2>&1; then
                echo "🖥️  Stopping tmate session (PID: $TMATE_PID)..."
                kill $TMATE_PID || true
              fi
            fi
          fi

          # Stop cloudflared tunnel
          TUNNEL_PID="${{ steps.tunnel.outputs.tunnel-pid }}"
          if [ -n "$TUNNEL_PID" ]; then
            if ps -p $TUNNEL_PID > /dev/null 2>&1; then
              echo "🌐 Stopping Cloudflare Tunnel (PID: $TUNNEL_PID)..."
              kill $TUNNEL_PID || true
            fi
          fi

          # Cleanup elite services
          ./action/ci-cleanup.sh
          echo "✅ Cleanup completed"

      - name: Summary
        if: always()
        run: |
          # Read duration from saved file (fallback to "N/A" if not available)
          DURATION_MIN="N/A"
          if [ -f /tmp/duration.txt ]; then
            DURATION_MIN=$(cat /tmp/duration.txt)
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📝 Run Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "   • Requested duration: ${DURATION_MIN} minutes"
          echo "   • Workflow status: ${{ job.status }}"
          echo "   • Completion time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
